<div class="container mt-2">
    <h4>Список всех объектов (продуктов, блюд, дикоросов, рыб)</h4>
    {{#if products.length}}
    <form id="showing_products">
    <table class="table table-sm table-hover">
        <thead>
            <tr class="table-info">
                <th scope="col">#</th>
                <th scope="col">Название</th>
                <th scope="col">Тип</th>
                <th scope="col">Описание</th>
                <th scope="col">Регион</th>
                <th scope="col">Координаты</th>
                <th scope="col">-</th>
            </tr>
        </thead>
        <tbody>
            {{#each products}}
            <tr>
                <td><input type="checkbox" value="{{_id}}" name="checked"></td>
                <td>{{ title }}</td>
                <td>{{ typeRU }}</td>
                <td>{{ description }}</td>
                {{#each regions}}
                <td>{{ title }}</td>
                <td>{{ coordinates }}</td>
                {{/each}}
                <td><button type="button" class="btn btn-outline-dark btn-edit-product" id="edit_product_{{@index}}" data-toggle="modal" data-target="#editProductModal" value="{{_id}}">Изменить</button></td>
            
                <input type="hidden" value="{{_id}}" name="id">
            </tr>
            {{/each}}
        </tbody>
    </table>
    <button type="button" class="btn btn-outline-dark" id="create_product" data-toggle="modal" data-target="#createProductModal">Создать</button>
    <button type="reset" class="btn btn-outline-dark" id="delete_products">Удалить</button>
    </form>
    {{else}}
    <p>[ В БД нет продуктов ]</p>
    <button type="button" class="btn btn-outline-dark" id="create_product" data-toggle="modal" data-target="#createProductModal">Создать</button>
    {{/if}}
</div>

<div class="container mt-2">
    <h4>Рестораны:</h4>
    {{#if restaurants.length}}
    <form id="showing_restaurants">
    <table class="table table-sm table-hover">
        <thead>
            <tr class="table-info">
                <th scope="col">#</th>
                <th scope="col">Название</th>
                <th scope="col">Регион</th>
                <th scope="col">Координаты</th>
                <th scope="col">Описание</th>
            </tr>
        </thead>
        <tbody>
            {{#each restaurants}}
            <tr>
                <td><input type="checkbox" value="{{_id}}" name="checked"></td>
                <td>{{ title }}</td>
                <td>{{ region.title }}</td>
                <td>{{ region.coordinates }}</td>
                <td>{{ description }}</td>
            
                <input type="hidden" value="{{_id}}" name="id">
            </tr>
            {{/each}}
        </tbody>
    </table>
    <button type="button" class="btn btn-outline-dark" id="create_restaurant" data-toggle="modal" data-target="#createRestaurantModal">Создать</button>
    <button type="reset" class="btn btn-outline-dark" id="delete_restaurants">Удалить</button>
    </form>
    {{else}}
    <p>[ В БД нет ресторанов ]</p>
    <button type="button" class="btn btn-outline-dark" id="create_restaurant" data-toggle="modal" data-target="#createRestaurantModal">Создать</button>
    {{/if}}
</div>
<!-- Modals -->
<!-- Создание продукта -->
<div class="modal fade" id="createProductModal" tabindex="-1" role="dialog" aria-labelledby="createProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createProductModalLabel">Создание продукта/блюда</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form action="/obj_create" method="POST" id="creatingProduct" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="typeOfProduct">Тип</label>
                        <select class="form-control" id="typeOfProduct" name="type">
                            <option value="product">Продукт</option>
                            <option value="dish">Блюдо</option>
                            <option value="wild_plant">Дикорос</option>
                            <option value="fish">Рыба</option>
                        </select>
                    </div>
                    <div class="form-group row">
                        <div class="col">
                            <label for="nameOfProduct">Название</label>
                            <input type="text" class="form-control" id="nameOfProduct" name="title" required>
                        </div>
                        <div class="col-md-2">
                            <label for="iconProduct">ВИД</label>
                            <div class="btn-group dropleft" id="iconProduct">
                                <input type="hidden" value="" name="icon_path" id="iconPathProduct">
                                <a class="btn btn-sm btn-outline-warning dropdown-toggle" id="dropdownIcons" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <img src="" alt="" id="showICON"/> 
                                </a>
                                <div class="dropdown-menu" aria-labelledby="dropdownIcons">
                                    {{#each dataIcons}}
                                    <a class="dropdown-item" id="{{ id }}"><img src="{{ path }}" alt=""/> {{ title }}</a>
                                    {{/each}}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group restaurants-picker">
                        <label for="listOfRestaurants">Рестораны</label>
                        <select class="selectpicker" id="listOfRestaurants" data-live-search="true" data-actions-box="true" name="restaurants" multiple>
                            {{#each restaurants}}
                            <option value="{{ _id }}">{{ title }}</option>
                            {{/each}} 
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="imageUpload">Загрузите фото объекта</label>
                        <input type="file" class="form-control-file" id="imageUpload" name="image">
                    </div>
                    <div class="form-group">
                        <label for="regOfProduct">Субъект РФ</label>
                        <input type="text" class="form-control" id="regOfProduct" name="region" aria-describedby="regHelp">
                        <small id="regHelp" class="form-text text-muted"></small>
                    </div>
                    <div class="form-group">
                        <label for="cookTypeOfProduct">Описание</label>
                        <input type="text" class="form-control" id="cookTypeOfProduct" name="description" aria-describedby="cookTypeHelp">
                        <small id="cookTypeHelp" class="form-text text-muted"></small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                <button type="submit" class="btn btn-primary" form="creatingProduct">Сохранить</button>
            </div>
        </div>
    </div>
</div>
<!-- Изменение продукта -->
<div class="modal fade" id="editProductModal" tabindex="-1" role="dialog" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProductModalLabel">Редактирование продукта/блюда</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="mapForObject">Местоположение на карте</label>
                    <div id="mapForObject" style="width: 700px; height: 400px; padding: 0; margin: 0;" aria-describedby="coordHelp"></div>
                    <small id="coordHelp" class="form-text text-muted">По умолчанию позиция = [0, 0].</small>
                </div>
                <div>
                    <label for="nameOfProductEdit">Название</label>
                    <input type="text" class="form-control" id="nameOfProductEdit" aria-describedby="editNameHelp">
                    <small id="editNameHelp" class="form-text text-muted">Оставьте поле пустым, если хотите оставить прежнее название.</small>
                </div>
                <div class="form-group">
                    <label for="descriptionEdit">Описание</label>
                    <input type="text" class="form-control" id="descriptionEdit" aria-describedby="editDescriptionHelp">
                    <small id="editDescriptionHelp" class="form-text text-muted">Оставьте поле пустым, если хотите оставить прежнее описание.</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="saveEditedInfo">Сохранить</button>
            </div>
        </div>
    </div>
</div>
<!-- Создание ресторана -->
<div class="modal fade" id="createRestaurantModal" tabindex="-1" role="dialog" aria-labelledby="createRestaurantModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createRestaurantModalLabel">Создание ресторана</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form action="/restaurant_create" method="POST" id="creatingRestaurant">
                    <div class="form-group row">
                        <div class="col">
                            <label for="nameOfRestaurant">Название</label>
                            <input type="text" class="form-control" id="nameOfRestaurant" name="title" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="mapForRestaurant">Местоположение на карте</label>
                        <div id="mapForRestaurant" style="width: 600px; height: 300px; padding: 0; margin: 0;" aria-describedby="coordsRestaurantHelp">
                             <input id="coordsForRestaurant" type="hidden" value=":55.755, 37.619:" name="region">
                        </div>
                        <small id="coordsRestaurantHelp" class="form-text text-muted">По умолчанию: 55.755, 37.619</small>
                    </div>
                    <div class="form-group">
                        <label for="descriptionRestaurant">Описание</label>
                        <input type="text" class="form-control" id="descriptionRestaurant" name="description">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                <button type="submit" class="btn btn-primary" form="creatingRestaurant">Сохранить</button>
            </div>
        </div>
    </div>
</div>



<script src="/js/jquery-3.5.1.js"></script>
<script type="text/javascript">
    var coordsObj = [0, 0];
    var firstGeoObject = "";
    ymaps.ready(init);

    function init() {
        let myPlacemark;
        let myMap = new ymaps.Map("mapForObject", {
            center: [55.755, 37.619],
            zoom: 9,
            controls: ['smallMapDefaultSet']
        }, {
            restrictMapArea: [
                [85, -179],
                [-65, 179]
            ]
        });

        myMap.events.add('click', function (e) {
            coordsObj = e.get('coords');
            if (myPlacemark) {
                myPlacemark.geometry.setCoordinates(coordsObj);
            }
            else {
                myPlacemark = createPlacemark(coordsObj);
                myMap.geoObjects.add(myPlacemark);
                myPlacemark.events.add('dragend', function () {
                    getAddress(myPlacemark.geometry.getCoordinates());
                });
            }
            getAddress(coordsObj);
        });

        function createPlacemark(coords) {
            return new ymaps.Placemark(coords, {
                iconCaption: 'поиск...'
            }, {
                preset: 'islands#violetDotIconWithCaption',
                draggable: true
            });
        }

        function getAddress(coords) {
            myPlacemark.properties.set('iconCaption', 'поиск...');
            ymaps.geocode(coords).then(function (res) {
                firstGeoObject = res.geoObjects.get(0);
                myPlacemark.properties.set({
                    iconCaption: "Точка выбрана.",
                    balloonContent: firstGeoObject.getAddressLine()
                });
            });
        }
    }
</script>
<script type="text/javascript">
    var coordsRestaurant = [0, 0];
    var firstGeoObject = "";
    ymaps.ready(init);

    function init() {
        let myPlacemark;
        let myMap = new ymaps.Map("mapForRestaurant", {
            center: [55.755, 37.619],
            zoom: 9
        }, {
            restrictMapArea: [
                [85, -179],
                [-65, 179]
            ]
        });

        myMap.events.add('click', function (e) {
            coordsRestaurant = e.get('coords');

            if (myPlacemark) {
                myPlacemark.geometry.setCoordinates(coordsRestaurant)
            }
            else {
                myPlacemark = createPlacemark(coordsRestaurant);
                myMap.geoObjects.add(myPlacemark);
                myPlacemark.events.add('dragend', function () {
                    getAddress(myPlacemark.geometry.getCoordinates());
                });
            }
            getAddress(coordsRestaurant);
        });

        function createPlacemark(coords) {
            return new ymaps.Placemark(coords, {
                iconCaption: 'поиск...'
            }, {
                preset: 'islands#violetDotIconWithCaption',
                draggable: true
            });
        }

        function getAddress(coords) {
            myPlacemark.properties.set('iconCaption', 'поиск...');
            ymaps.geocode(coords).then(function (res) {
                firstGeoObject = res.geoObjects.get(0);
                myPlacemark.properties.set({
                    iconCaption: "Точка выбрана.",
                    balloonContent: firstGeoObject.getAddressLine()
                });

                let value = "";
                let region = "";
                if (firstGeoObject != "") {
                    const arrayOfStrings = firstGeoObject.getAddressLine().split(", ");
                    if (arrayOfStrings.length > 1) {region += arrayOfStrings[1];}
                    else {region = arrayOfStrings[0];}
                }
                value += region + ":" + coordsRestaurant + ":" + GetISO3166ByReg(region);
                let mapElem = document.getElementById("coordsForRestaurant");
                mapElem.setAttribute("value", value);

            });
        }
    }
</script>
<script>
    function GetISO3166ByReg(region) {
        const decodedJson = decodeURIComponent("{{{dataCodeRegs}}}");
        const jsonObj = JSON.parse(decodedJson);
        for (let i=0; i<jsonObj.length; i++) {
            if (region.toLowerCase().indexOf(jsonObj[i].title.toLowerCase()) !== -1) {
                return jsonObj[i].iso3166;
            }
        }
        return "NULL";
    }

    $('#delete_products').click(async function() {
        let data = $('#showing_products').serialize();
        try {
            const response = await fetch('/obj_delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            });
            const status = await response.ok;
            window.location.reload(false);
            return;
        } catch (error) {
            console.error('error: ', error);
        }
    });

    $('#delete_restaurants').click(async function() {
        let data = $('#showing_restaurants').serialize();
        try {
            const response = await fetch('/restaurant_delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: data
            });
            const status = await response.ok;
            window.location.reload(false);
            return;
        } catch (error) {
            console.error('error: ', error);
        }
    });
 
    let idToEdit = "";
    const buttonsEditProduct = document.getElementsByClassName('btn-edit-product');
    for (let i=0; i<buttonsEditProduct.length; i++) {
        buttonsEditProduct[i].addEventListener('click', async function(e) { 
            idToEdit = $(this).prop('value');
        });
    }
    $('#saveEditedInfo').click(async function() {
        let region = "";
        if (firstGeoObject != "") {
            const arrayOfStrings = firstGeoObject.getAddressLine().split(", ");
            if (arrayOfStrings.length > 1) {region += arrayOfStrings[1];}
            else {region = arrayOfStrings[0];}
        }
        let title = $('#nameOfProductEdit').val();
        let description = $('#descriptionEdit').val();

        if (title === undefined) {title = "";}
        if (description === undefined) {description = "";}

        data = {
            id: idToEdit,
            regions: [
                {
                    title: region,
                    coordinates: coordsObj,
                    iso3166: GetISO3166ByReg(region)
                }
            ],
            title: title,
            description: description
        }

        try {
            const response = await fetch('/obj_edit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data) 
            });
            const status = await response.ok;
            window.location.reload(false);
            return;
        } catch (error) {
            console.error('error: ', error);
        }
    });



    function setHelperText() {
        let typeStr = "";
        switch( $('#typeOfProduct').val() ) {
            case "product":
                typeStr = "продукт";
                break;
            case "dish":
                typeStr = "блюдо";
                break;
            case "wild_plant":
                typeStr = "дикорос";
                break;
            case "fish":
                typeStr = "рыба";
                break;
            default:
                break;
        }
        $('#regHelp').text(`Введите регион, в котором находится ${typeStr}.`);
        $('#cookTypeHelp').text(`Введите тип кухни, к которому относится ${typeStr}.`);
    }
    function showSelectOfRestaurants() {
        if ($('#typeOfProduct').val() == "dish") {
            $('.restaurants-picker').show();
        } else {
            $('.restaurants-picker').find('select').val('default');
            $('.restaurants-picker').hide();
        }
    }

    function typeOfObjHandler() {
        setHelperText();
        showSelectOfRestaurants();

    }

    $(document).ready(function() {
        typeOfObjHandler();
        $('#typeOfProduct').change(function() {typeOfObjHandler()});

        let path = $('.dropdown-menu a:first-child').find('img').attr("src");
        $('#iconPathProduct').val(path);
        $('#showICON').attr("src", path);
        $('.dropdown-menu a').click(function() {
            let title = $(this).text();
            let value = $(this).find('img').attr("src");
            $('#iconPathProduct').val(value);
            $('#showICON').attr("src", value);
        });
    });
</script>
