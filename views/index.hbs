<h3 style="margin: 1rem;">Гастрономическая карта</h3>
<div class="btn-toolbar justify-content-between mb-2 mt-2" role="toolbar" aria-label="Map's type">
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary" id="productType">Продукты</button>
        <button type="button" class="btn btn-outline-primary" id="dishType">Блюда</button>
        <button type="button" class="btn btn-outline-primary" id="wildPlantType">Дикоросы</button>
        <button type="button" class="btn btn-outline-primary" id="fishType">Рыба</button>
    </div>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary" id="allType">Вся карта</button>
    </div>
</div>

<div class="container">
    <div id="map" style="height: 500px; padding: 0; margin: 0;"></div>
</div>

<h3 style="margin: 1rem;" id="block">Подробнее</h3>
<div class="container">
    <div class="row">
        {{#each products}}
        <div class="col-sm-3 col-md-3 pb-2 mb-2 card-wrapper" value="{{ type }}">
            <div class="card" id="{{ _id }}">
                <img class="card-img-top" src="data:image/{{ img.contentType }};base64, {{ img.dataStr }}" onerror="this.src = 'images/default.png'; this.onerror = null;"> 
                <div class="card-body">
                    <h4 class="card-title">{{ title }}</h4>
                    <h6 class="card-text"><em>{{ typeRU }}</em></h6>
                    <p class="card-text">{{ description }}</p>
                    {{#each regions}}
                        <p class="card-text"><small>Регион: {{ title }}</small></p>
                    {{/each}}
                </div>
            </div>
        </div>
        {{/each}}
    </div> 
</div>


<script src="/js/jquery-3.5.1.js"></script>
<script type="text/javascript">
    let myMap = null;
    let choosenCard = null;

    function startYandex(url) {
        filterObjects(url)

        ymaps.ready(init);
        function init() {
            let dataMarks = null;

            myMap = new ymaps.Map("map", {
                center: [55.755, 37.619],
                zoom: 8
            }, {
                restrictMapArea: [
                    [85, -179],
                    [-65, 179]
                ]
            });

            let circlePointer = new ymaps.Circle([
                [55.755, 37.619], // Координаты центра круга
                100 // Радиус круга в метрах
            ], {}, {
                draggable: false,
                fillColor: "#FF5240",
                strokeColor: "#000000",
                fillOpacity: 0.3,
                strokeOpacity: 0.5,
                strokeWidth: 2
            });

            const cards = document.getElementsByClassName("card");
            for (let i=0; i<cards.length; i++) {
                cards[i].onclick = function (e) {
                    if (dataMarks != null) {
                        let coords = null;
                        for (let j=0; j<dataMarks.features.length; j++) {
                            const id = dataMarks.features[j].id_glob;
                            if (id == choosenCard) {
                                coords = dataMarks.features[j].geometry.coordinates;
                                myMap.setCenter (coords, 14);
                            }
                        }
                        if (coords != null) {
                            circlePointer.geometry._radius = Math.pow(1.9, 9);
                            circlePointer.geometry._coordinates = coords;
                            myMap.setCenter (coords, 14);
                            myMap.geoObjects.add(circlePointer);
                            isCirclePointer = true;
                        }
                        else {
                            myMap.setCenter ([55.755, 37.619], 7);
                            myMap.geoObjects.remove(circlePointer);
                            isCirclePointer = false;
                        }
                    }
                }
            }

            let isCirclePointer = false;
            myMap.events.add('boundschange', function(e) {
                if (isCirclePointer) {
                    myMap.geoObjects.remove(circlePointer);
                    circlePointer.geometry._radius = Math.pow(1.9, (23-e.get('newZoom')));
                    myMap.geoObjects.add(circlePointer);
                }
            });

            function ColorRegs(data) {
                ymaps.borders.load('RU', {
                lang: "ru",
                quality: 2
                }).then(function (geojson) {
                    for (let i=0; i<geojson.features.length; i++) {
                        if (data[geojson.features[i].properties.iso3166]) {
                            let properties= geojson.features[i].properties;
                            properties.hintContent = '';

                            let geoObject = new ymaps.GeoObject ({
                                geometry: geojson.features[i].geometry,
                                properties: properties,
                            }, {
                                fillColor: data[geojson.features[i].properties.iso3166],
                                fillOpacity: 0.25,
                                strokeColor: '#000000',
                                strokeOpacity: 0.4
                            });
                            myMap.geoObjects.add(geoObject);
                        }
                    }
                });
            }

            objectManagerMarks = new ymaps.ObjectManager({
                clusterize: true,
                gridSize: 32,
                clusterDisableClickZoom: true
            });
            objectManagerMarks.clusters.options.set('preset', 'islands#greenClusterIcons');
            myMap.geoObjects.add(objectManagerMarks);

            $.ajax({
                url: `/data/dynamic/dataMap_${url}.json`
            }).done(function(data) {
                dataMarks = data;
                objectManagerMarks.add(dataMarks);
            });

            $.ajax({
                url: `/data/dynamic/dataRegColors_${url}.json`
            }).done(function(data) {
                ColorRegs(data);
            });
        }
    }
</script>
<script>
function filterObjects(type) {
    const $cards = $('.card-wrapper');
    $cards.each(function(index) {
        if ($(this).attr("value") != type && type != "all") {
            $(this).addClass("d-none");
        } else {
            $(this).removeClass("d-none");
        }
    });
}

function chooseCardHandler(obj, choosen) {
    try {
        if (choosen != obj.attr("id")) {choosen = obj.attr("id");}
        else {choosen = null;}
    } catch (e) {
        choosen = null;
    }
    const $cards = $('.card');
    $cards.each(function(index) {
        if ($(this).attr("id") == choosen) {
            $(this).addClass("card-choosen");
        } else {
            $(this).removeClass("card-choosen");
        }
    });
    return choosen;
}

$(document).ready(function() {
    choosenCard = chooseCardHandler(null, choosenCard);
    startYandex("product");
    $('#productType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("product");
    });
    $('#dishType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("dish");
    });
    $('#wildPlantType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("wild_plant");
    });
    $('#fishType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("fish");
    });
    $('#allType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("all");
    });
    // Выбор карточки из списка "подробнее":
    $('.card').click(function () {
        choosenCard = chooseCardHandler($(this), choosenCard);
    });
});
</script>
