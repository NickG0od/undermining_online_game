<div class="container mt-2">
    <h3>Гастрономическая карта</h3>
    <div class="btn-toolbar justify-content-between mb-2 mt-2" role="toolbar" aria-label="Map's type">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-primary" id="productType">Продукты</button>
            <button type="button" class="btn btn-outline-primary" id="dishType">Блюда</button>
            <button type="button" class="btn btn-outline-primary" id="wildPlantType">Дикоросы</button>
            <button type="button" class="btn btn-outline-primary" id="fishType">Рыба</button>
        </div>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-primary" id="allType">Вся карта</button>
        </div>
    </div>
    <div class="checkbox" id="showPartnersOnMap" >
        <input id="toggler" type="checkbox" data-toggle="toggle" data-size="small" data-on="ВКЛ" data-off="ВЫКЛ" checked>
        <label for="toggler" id="toggler_label">Регионы-участники проекта</label>
    </div>
</div>

<div class="container mt-2">
    <div id="map" style="height: 500px; padding: 0; margin: 0;"></div>
</div>

<div class="container mt-2">
    <ul class="nav nav-tabs">
        <li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#objects">Объекты на карте</a></li>
        <li class="nav-item"><a class="nav-link" data-toggle="tab" href="#partners">Регионы-участники</a></li>
    </ul>
    <div class="tab-content" style="margin: 1rem;">
        <div id="objects" class="tab-pane active show">
            <div class="row">
                {{#each products}}
                <div class="col-6 col-sm-4 col-lg-3 mb-3 card-wrapper" value="{{ type }}">
                    <div class="card card-product" id="{{ _id }}">
                        <div class="card-body">
                            <div class="img-wrap">
                                <img class="card-img-top cover" src="data:image/{{ img.contentType }};base64, {{ img.dataStr }}" onerror="this.src = 'images/default.png'; this.onerror = null;"> 
                            </div>
                            <h4 class="card-title">{{ title }}</h4>
                            {{#each regions}}
                                <p class="card-text">{{ title }}</p>
                            {{/each}}
                        </div>
                        <div class="card-footer text-center">
                            <a class="btn btn-outline-primary card-link" data-toggle="modal" data-target="#descriptionOfObj" value="{{ description }}">Подробнее</a>
                        </div>
                    </div>
                </div>
                {{/each}}
            </div>
        </div>
        <div id="partners" class="tab-pane fade">
            <div class="row">
                {{#each partners}}
                <div class="col-6 col-sm-4 col-lg-3 mb-3">
                    <div class="card card-partner" id="{{ _id }}">
                        <div class="img-wrap">
                            <img class="card-img-top cover" src="data:image/{{ img.contentType }};base64, {{ img.dataStr }}" onerror="this.src = 'images/default.png'; this.onerror = null;"> 
                        </div>
                        <div class="card-body">
                            <h4 class="card-title">{{ title }}</h4>
                            <p class="card-text">{{ description }}</p>
                        </div>
                    </div>
                </div>
                {{/each}}
            </div> 
        </div>
    </div>
</div>
<!-- Modals -->
<!-- Показать подробное описание: -->
<div class="modal fade" id="descriptionOfObj" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Описание</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="descriptionText"></p>
            </div>
        </div>
    </div>
</div>
<!-- Показать описание ресторана: -->
<div class="modal fade" id="showRestaurantModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ресторан</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="title_restaurant_modal"></p>
                <p id="description_restaurant_modal"></p>
            </div>
        </div>
    </div>
</div>



<script src="/js/jquery-3.5.1.js"></script>
<script type="text/javascript">
    let myMap = null;
    let choosenCard = null;

    function startYandex(url) {
        filterObjects(url);

        ymaps.ready(init);
        function init() {
            let dataMarks = null;

            myMap = new ymaps.Map("map", {
                center: [64.091, 81.822],
                zoom: 3,
                controls: ['smallMapDefaultSet']
            }, {
                restrictMapArea: [
                    [85, -179],
                    [-65, 179]
                ]
            });

            let circlePointer = new ymaps.Circle([
                [55.755, 37.619], // Координаты центра круга
                100 // Радиус круга в метрах
            ], {}, {
                draggable: false,
                fillColor: "#FF5240",
                strokeColor: "#000000",
                fillOpacity: 0.3,
                strokeOpacity: 0.5,
                strokeWidth: 2
            });

            const cards = document.getElementsByClassName("card");
            for (let i=0; i<cards.length; i++) {
                cards[i].onclick = function (e) {
                    if (dataMarks != null) {
                        let coords = null;
                        for (let j=0; j<dataMarks.features.length; j++) {
                            const id = dataMarks.features[j].id_glob;
                            if (id == choosenCard) {
                                coords = dataMarks.features[j].geometry.coordinates;
                                myMap.setCenter (coords, 14);
                            }
                        }
                        if (coords != null) {
                            circlePointer.geometry._radius = Math.pow(1.9, 9);
                            circlePointer.geometry._coordinates = coords;
                            myMap.setCenter (coords, 14);
                            myMap.geoObjects.add(circlePointer);
                            isCirclePointer = true;
                        }
                        else {
                            myMap.setCenter ([64.091, 81.822], 3);
                            myMap.geoObjects.remove(circlePointer);
                            isCirclePointer = false;
                        }
                    }
                }
            }

            const tooglePartnersOnMap = document.getElementById("showPartnersOnMap");
            tooglePartnersOnMap.onclick = function(e) {
                if (e.target.id != "toggler" && e.target.id != "toggler_label" && e.target.id !="showPartnersOnMap") {
                    let elem = e.target.parentElement.parentElement
                    if (! elem.classList.contains("off")) {
                        for (let i=0; i<geoObjectPartners.length; i++) {
                            myMap.geoObjects.remove(geoObjectPartners[i]);
                        }
                    } else {
                        for (let i=0; i<geoObjectPartners.length; i++) {
                            myMap.geoObjects.add(geoObjectPartners[i]);
                        }
                    }
                }
            }

            let isCirclePointer = false;
            myMap.events.add('boundschange', function(e) {
                if (isCirclePointer) {
                    myMap.geoObjects.remove(circlePointer);
                    circlePointer.geometry._radius = Math.pow(1.9, (23-e.get('newZoom')));
                    myMap.geoObjects.add(circlePointer);
                }
            });

            let geoObjectPartners = [];
            function ColorAndPartnerRegs(data) {
                ymaps.borders.load('RU', {
                lang: "ru",
                quality: 2
                }).then(function (geojson) {
                    for (let i=0; i<geojson.features.length; i++) {
                        // Покраска регионов, входящие в какие-лтбо кухни
                        if (data[geojson.features[i].properties.iso3166]) {
                            let properties= geojson.features[i].properties;
                            properties.hintContent = '';

                            let geoObject = new ymaps.GeoObject ({
                                geometry: geojson.features[i].geometry,
                                properties: properties,
                            }, {
                                fillColor: data[geojson.features[i].properties.iso3166],
                                fillOpacity: 0.25,
                                strokeColor: '#000000',
                                strokeOpacity: 0.4
                            });
                            myMap.geoObjects.add(geoObject);
                        }
                        // Штриховка регионов участников
                        const decodedJson = decodeURIComponent("{{{dataRegPartners}}}");
                        const jsonObj = JSON.parse(decodedJson);
                        if (jsonObj) {
                            for (let k=0; k<jsonObj.length; k++) {
                                if (geojson.features[i].properties.iso3166 == jsonObj[k]) {
                                    let properties= geojson.features[i].properties;
                                    properties.hintContent = '';
                                    let geoObject = new ymaps.GeoObject ({
                                        geometry: geojson.features[i].geometry,
                                        properties: properties,
                                    }, {
                                        fillImageHref: "images/hatching.png",
                                        fillMethod: 'tile',
                                        fillColor: '#ffffff',
                                        fillOpacity: 0.3
                                    });
                                    if (! tooglePartnersOnMap.firstElementChild.classList.contains("off")) {
                                        myMap.geoObjects.add(geoObject);
                                    }
                                    geoObjectPartners.push(geoObject)
                                }
                            }
                        }
                    }
                });
            }

            objectManagerMarks = new ymaps.ObjectManager({
                clusterize: true,
                gridSize: 32,
                clusterDisableClickZoom: true
            });
            objectManagerMarks.clusters.options.set('preset', 'islands#greenClusterIcons');
            myMap.geoObjects.add(objectManagerMarks);

            $.ajax({
                url: `/data/dynamic/dataMap_${url}.json`
            }).done(function(data) {
                dataMarks = data;
                objectManagerMarks.add(dataMarks);
            });
            $.ajax({
                url: `/data/dynamic/dataRegColors_${url}.json`
            }).done(function(data) {
                ColorAndPartnerRegs(data);
            });
        }
    }
</script>
<script>
function filterObjects(type) {
    const $cards = $('.card-wrapper');
    $cards.each(function(index) {
        if ($(this).attr("value") != type && type != "all") {
            $(this).removeClass("d-flex");
            $(this).addClass("d-none");
        } else {
            $(this).removeClass("d-none");
            $(this).addClass("d-flex");
        }
    });
}

function chooseCardHandler(obj, choosen) {
    try {
        if (choosen != obj.attr("id")) {choosen = obj.attr("id");}
        else {choosen = null;}
    } catch (e) {
        choosen = null;
    }
    const $cards = $('.card-product');
    $cards.each(function(index) {
        if ($(this).attr("id") == choosen) {
            $(this).addClass("card-choosen");
        } else {
            $(this).removeClass("card-choosen");
        }
    });
    return choosen;
}


$(document).ready(function() {
    choosenCard = chooseCardHandler(null, choosenCard);
    startYandex("all");
    $('#productType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("product");
    });
    $('#dishType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("dish");
    });
    $('#wildPlantType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("wild_plant");
    });
    $('#fishType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("fish");
    });
    $('#allType').click(function() {
        if (myMap) {myMap.destroy();}
        choosenCard = chooseCardHandler(null, choosenCard);
        startYandex("all");
    });
    // Выбор карточки из списка "объекты на карте"
    $('.card-body').click(function () {
        let card = $(this).closest('.card');
        choosenCard = chooseCardHandler(card, choosenCard);
    });
    // Наводка на картинку в карточке
    $('.card-body').hover(function() {
        let card = $(this).closest('.card');
        card.addClass("card-hoverable");
    }, function() {
        let card = $(this).closest('.card');
        card.removeClass("card-hoverable");
    });
    // Нажатие на кнопку "Подробнее" в карточке
    $('.card-link').click(function() {
        $('#descriptionText').text( $(this).attr("value") );
    });
    // Открытие панели с информацией о ресторане
});
</script>
